# -*- coding: utf-8 -*-
"""Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1olXUzM9HPHe6wX6TFqlpubGRJ5ExSPRy
"""

import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from models.efficientnet_crnn import create_model, CONFIG
from dataloader import preprocess_dataset, train_files, val_files, test_files, plot_spectrogram, commands, AUTOTUNE


train_ds = preprocess_dataset(train_files)
val_ds = preprocess_dataset(val_files)
test_ds = preprocess_dataset(test_files)

rows = 3
cols = 3
n = rows * cols
fig, axes = plt.subplots(rows, cols, figsize=(10, 10))

for i, (spectrogram, label_id) in enumerate(train_ds.take(n)):
    r = i // cols
    c = i % cols
    ax = axes[r][c]
    print(spectrogram.shape)
    print(np.min(spectrogram), np.max(spectrogram))
    plot_spectrogram(spectrogram.numpy(), ax)

    ax.set_title(f"{label_id.numpy()}-{commands[label_id.numpy()]}")
    ax.axis('off')

plt.show()

batch_size = 64
train_ds = train_ds.batch(batch_size)
val_ds = val_ds.batch(batch_size)

train_ds = train_ds.cache().prefetch(AUTOTUNE)
val_ds = val_ds.cache().prefetch(AUTOTUNE)


model = create_model([128, 128, 3], CONFIG)

model.compile(
    optimizer=tf.keras.optimizers.Adam(),
    loss=tf.keras.losses.SparseCategoricalCrossentropy(),
    metrics=['accuracy'],
)

EPOCHS = 50

if __name__ == "__main__":
    history = model.fit(
        train_ds,
        validation_data=val_ds,
        epochs=EPOCHS,
        callbacks=tf.keras.callbacks.EarlyStopping(verbose=1, patience=4),
    )

    model.save("models/inception_all_data_model.h5")

    # metrics = history.history
    # plt.plot(history.epoch, metrics['loss'], metrics['val_loss'])
    # plt.legend(['loss', 'val_loss'])
    # plt.show(
    # )
    #
    # test_audio = []
    # test_labels = []
    #
    # for audio, label in test_ds:
    #     test_audio.append(audio.numpy())
    #     test_labels.append(label.numpy())
    #
    # test_audio = np.array(test_audio)
    # test_labels = np.array(test_labels)
    #
    # y_pred = np.argmax(model.predict(test_audio), axis=1)
    # y_true = test_labels
    #
    # test_acc = sum(y_pred == y_true) / len(y_true)
    # print(f'Test set accuracy: {test_acc:.0%}')
    #
    # confusion_mtx = tf.math.confusion_matrix(y_true, y_pred)
    # plt.figure(figsize=(10, 8))
    # sns.heatmap(confusion_mtx,
    #             xticklabels=commands,
    #             yticklabels=commands,
    #             annot=True, fmt='g')
    # plt.xlabel('Prediction')
    # plt.ylabel('Label')
    # plt.show()
